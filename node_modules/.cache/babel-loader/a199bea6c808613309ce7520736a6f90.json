{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Bar\\\\Desktop\\\\Code\\\\CoinmamaHomeTask\\\\cryptorates-app-fixed\\\\src\\\\components\\\\pages\\\\HistoricPrices\\\\HistoricPrices.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { backendAPIAxios } from '../../../utils/http';\nimport HistoricPricesView from './HistoricPrices.view';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HistoricPrices = props => {\n  _s();\n\n  const [historicPricesState, sethistoricPricesState] = useState(null);\n\n  const historicPricesChangeHandler = value => sethistoricPricesState(() => value);\n\n  const [data, setData] = useState();\n  const [refreshInterval, setRefreshInterval] = useState();\n\n  const fetchMetrics = () => {\n    backendAPIAxios.get(`/history?currency=BTCUSD`).then(response => {\n      console.log(response.data);\n\n      if (!response.data.success) {\n        return alert(`Failed to get historic prices with error: ${response.data.message}`);\n      }\n\n      sethistoricPricesState(() => response.data.data);\n    }).catch(e => {\n      alert(`Failed to get historic prices with error: ${e}`);\n    });\n  };\n\n  useEffect(() => {\n    if (refreshInterval && refreshInterval > 0) {\n      const interval = setInterval(fetchMetrics, refreshInterval);\n      return () => clearInterval(interval);\n    }\n  }, [refreshInterval]); // useEffect(() => {\n  //   backendAPIAxios.get(`/history?currency=BTCUSD`)\n  //   .then((response: AxiosResponse<IHistoricPricesResponse>) => {\n  //     console.log(response.data)\n  //     if (!response.data.success) {\n  //       return alert(`Failed to get historic prices with error: ${response.data.message}`)\n  //     }\n  //     sethistoricPricesState(() => response.data.data!);\n  //   })\n  //   .catch((e: AxiosError) => {\n  //     alert(`Failed to get historic prices with error: ${e}`)\n  //   })\n  // }, [ sethistoricPricesState ]);\n\n  return /*#__PURE__*/_jsxDEV(HistoricPricesView, {\n    historicPrices: historicPricesState,\n    historicPricesChangeHandler: historicPricesChangeHandler,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HistoricPrices, \"W3eIpiVJdDdhw111t5yg+0TBNlQ=\");\n\n_c = HistoricPrices;\nHistoricPrices.displayName = 'HistoricPrices';\nHistoricPrices.defaultProps = {};\nexport default HistoricPrices;\n\nvar _c;\n\n$RefreshReg$(_c, \"HistoricPrices\");","map":{"version":3,"sources":["C:/Users/Daniel Bar/Desktop/Code/CoinmamaHomeTask/cryptorates-app-fixed/src/components/pages/HistoricPrices/HistoricPrices.tsx"],"names":["React","useEffect","useState","backendAPIAxios","HistoricPricesView","HistoricPrices","props","historicPricesState","sethistoricPricesState","historicPricesChangeHandler","value","data","setData","refreshInterval","setRefreshInterval","fetchMetrics","get","then","response","console","log","success","alert","message","catch","e","interval","setInterval","clearInterval","children","displayName","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAKA,SAASC,eAAT,QAAgC,qBAAhC;AAIA,OAAOC,kBAAP,MAA+B,uBAA/B;;;AAMA,MAAMC,cAA+B,GAAIC,KAAD,IAA2C;AAAA;;AACjF,QAAM,CAAEC,mBAAF,EAAuBC,sBAAvB,IAAkDN,QAAQ,CAA2B,IAA3B,CAAhE;;AACA,QAAMO,2BAA2B,GAAIC,KAAD,IAAqCF,sBAAsB,CAAC,MAAME,KAAP,CAA/F;;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,EAAhC;AACA,QAAM,CAACW,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,EAAtD;;AAEA,QAAMa,YAAY,GAAG,MAAM;AACzBZ,IAAAA,eAAe,CAACa,GAAhB,CAAqB,0BAArB,EACCC,IADD,CACOC,QAAD,IAAsD;AAE1DC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACP,IAArB;;AACA,UAAI,CAACO,QAAQ,CAACP,IAAT,CAAcU,OAAnB,EAA4B;AAC1B,eAAOC,KAAK,CAAE,6CAA4CJ,QAAQ,CAACP,IAAT,CAAcY,OAAQ,EAApE,CAAZ;AACD;;AAEDf,MAAAA,sBAAsB,CAAC,MAAMU,QAAQ,CAACP,IAAT,CAAcA,IAArB,CAAtB;AACD,KATD,EAUCa,KAVD,CAUQC,CAAD,IAAmB;AACxBH,MAAAA,KAAK,CAAE,6CAA4CG,CAAE,EAAhD,CAAL;AACD,KAZD;AAaD,GAdD;;AAgBAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,eAAe,IAAIA,eAAe,GAAG,CAAzC,EAA4C;AAC1C,YAAMa,QAAQ,GAAGC,WAAW,CAACZ,YAAD,EAAeF,eAAf,CAA5B;AACA,aAAO,MAAMe,aAAa,CAACF,QAAD,CAA1B;AACD;AACF,GALQ,EAKN,CAACb,eAAD,CALM,CAAT,CAtBiF,CA6BjF;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,QAAC,kBAAD;AACE,IAAA,cAAc,EAAEN,mBADlB;AAEE,IAAA,2BAA2B,EAAEE,2BAF/B;AAAA,cAGEH,KAAK,CAACuB;AAHR;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAnDD;;GAAMxB,c;;KAAAA,c;AAqDNA,cAAc,CAACyB,WAAf,GAA6B,gBAA7B;AACAzB,cAAc,CAAC0B,YAAf,GAA8B,EAA9B;AAEA,eAAe1B,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { AxiosResponse, AxiosError } from 'axios'\n\nimport { IHistoricPricesResponse } from '../../../models/response/crypto';\n\nimport { backendAPIAxios } from '../../../utils/http';\n\nimport { IHistoricPrices } from '../../../models/crypto';\n\nimport HistoricPricesView from './HistoricPrices.view';\n\ninterface Props {\n  readonly historicPrices: (value: IHistoricPrices[]) => void;\n}\n\nconst HistoricPrices: React.FC<Props> = (props: React.PropsWithChildren<Props>) => {\n  const [ historicPricesState, sethistoricPricesState ] = useState<IHistoricPrices[] | null>(null);\n  const historicPricesChangeHandler = (value: IHistoricPrices[] | null) => sethistoricPricesState(() => value);\n  const [data, setData] = useState();\n  const [refreshInterval, setRefreshInterval] = useState();\n\n  const fetchMetrics = () => {\n    backendAPIAxios.get(`/history?currency=BTCUSD`)\n    .then((response: AxiosResponse<IHistoricPricesResponse>) => {\n\n      console.log(response.data)\n      if (!response.data.success) {\n        return alert(`Failed to get historic prices with error: ${response.data.message}`)\n      }\n\n      sethistoricPricesState(() => response.data.data!);\n    })\n    .catch((e: AxiosError) => {\n      alert(`Failed to get historic prices with error: ${e}`)\n    })\n  }\n\n  useEffect(() => {\n    if (refreshInterval && refreshInterval > 0) {\n      const interval = setInterval(fetchMetrics, refreshInterval);\n      return () => clearInterval(interval);\n    }\n  }, [refreshInterval]);\n\n  // useEffect(() => {\n  //   backendAPIAxios.get(`/history?currency=BTCUSD`)\n  //   .then((response: AxiosResponse<IHistoricPricesResponse>) => {\n\n  //     console.log(response.data)\n  //     if (!response.data.success) {\n  //       return alert(`Failed to get historic prices with error: ${response.data.message}`)\n  //     }\n\n  //     sethistoricPricesState(() => response.data.data!);\n  //   })\n  //   .catch((e: AxiosError) => {\n  //     alert(`Failed to get historic prices with error: ${e}`)\n  //   })\n  // }, [ sethistoricPricesState ]);\n\n  return (\n    <HistoricPricesView\n      historicPrices={historicPricesState}\n      historicPricesChangeHandler={historicPricesChangeHandler}\n    >{props.children}</HistoricPricesView>\n  );\n};\n\nHistoricPrices.displayName = 'HistoricPrices';\nHistoricPrices.defaultProps = {};\n\nexport default HistoricPrices;"]},"metadata":{},"sourceType":"module"}