{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Bar\\\\Desktop\\\\Code\\\\CoinmamaHomeTask\\\\cryptorates-app\\\\src\\\\components\\\\pages\\\\Prices\\\\Prices.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { backendAPIAxios } from '../../../utils/http';\nimport PricesView from './Prices.view';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Prices = props => {\n  _s();\n\n  const [pricesState, setPricesState] = useState(null);\n\n  const pricesChangeHandler = value => setPricesState(() => value);\n\n  const fetchData = () => {\n    backendAPIAxios.get(`/prices`).then(response => {\n      if (!response.data.success) {\n        return alert(`Failed to get prices with error: ${response.data.message}`);\n      }\n\n      setPricesState(() => response.data.data);\n    }).catch(e => {\n      alert(`Failed to get prices with error: ${e}`);\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(() => fetchData(), 300000);\n    return () => clearInterval(interval);\n  }, [setPricesState]);\n  return /*#__PURE__*/_jsxDEV(PricesView, {\n    prices: pricesState,\n    pricesChangeHandler: pricesChangeHandler,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Prices, \"58+yVfn15zjxQ38yvjzexMoYw3o=\");\n\n_c = Prices;\nPrices.displayName = 'Prices';\nPrices.defaultProps = {};\nexport default Prices;\n\nvar _c;\n\n$RefreshReg$(_c, \"Prices\");","map":{"version":3,"sources":["C:/Users/Daniel Bar/Desktop/Code/CoinmamaHomeTask/cryptorates-app/src/components/pages/Prices/Prices.tsx"],"names":["React","useEffect","useState","backendAPIAxios","PricesView","Prices","props","pricesState","setPricesState","pricesChangeHandler","value","fetchData","get","then","response","data","success","alert","message","catch","e","interval","setInterval","clearInterval","children","displayName","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAMA,SAASC,eAAT,QAAgC,qBAAhC;AAIA,OAAOC,UAAP,MAAuB,eAAvB;;;AAMA,MAAMC,MAAuB,GAAIC,KAAD,IAA2C;AAAA;;AACzE,QAAM,CAAEC,WAAF,EAAeC,cAAf,IAAkCN,QAAQ,CAAiB,IAAjB,CAAhD;;AACA,QAAMO,mBAAmB,GAAIC,KAAD,IAA2BF,cAAc,CAAC,MAAME,KAAP,CAArE;;AAEA,QAAMC,SAAS,GAAG,MAAM;AACtBR,IAAAA,eAAe,CAACS,GAAhB,CAAqB,SAArB,EACCC,IADD,CACOC,QAAD,IAA8C;AAClD,UAAI,CAACA,QAAQ,CAACC,IAAT,CAAcC,OAAnB,EAA4B;AAC1B,eAAOC,KAAK,CAAE,oCAAmCH,QAAQ,CAACC,IAAT,CAAcG,OAAQ,EAA3D,CAAZ;AACD;;AAEDV,MAAAA,cAAc,CAAC,MAAMM,QAAQ,CAACC,IAAT,CAAcA,IAArB,CAAd;AACD,KAPD,EAQCI,KARD,CAQQC,CAAD,IAAmB;AACxBH,MAAAA,KAAK,CAAE,oCAAmCG,CAAE,EAAvC,CAAL;AACD,KAVD;AAWD,GAZD;;AAcAnB,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,SAAS;AACT,UAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAMX,SAAS,EAAhB,EAAoB,MAApB,CAA5B;AACA,WAAO,MAAMY,aAAa,CAACF,QAAD,CAA1B;AACD,GAJQ,EAIN,CAACb,cAAD,CAJM,CAAT;AAMA,sBACE,QAAC,UAAD;AACE,IAAA,MAAM,EAAED,WADV;AAEE,IAAA,mBAAmB,EAAEE,mBAFvB;AAAA,cAGEH,KAAK,CAACkB;AAHR;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA9BD;;GAAMnB,M;;KAAAA,M;AAgCNA,MAAM,CAACoB,WAAP,GAAqB,QAArB;AACApB,MAAM,CAACqB,YAAP,GAAsB,EAAtB;AAEA,eAAerB,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { AxiosResponse, AxiosError } from 'axios';\n\nimport { IPricesResponse } from '../../../models/response/crypto';\n\nimport { backendAPIAxios } from '../../../utils/http';\n\nimport { IPrices } from '../../../models/crypto';\n\nimport PricesView from './Prices.view';\n\ninterface Props {\n  readonly prices: (value: IPrices) => void;\n}\n\nconst Prices: React.FC<Props> = (props: React.PropsWithChildren<Props>) => {\n  const [ pricesState, setPricesState ] = useState<IPrices | null>(null);\n  const pricesChangeHandler = (value: IPrices | null) => setPricesState(() => value);\n\n  const fetchData = () => {\n    backendAPIAxios.get(`/prices`)\n    .then((response: AxiosResponse<IPricesResponse>) => {\n      if (!response.data.success) {\n        return alert(`Failed to get prices with error: ${response.data.message}`)\n      }\n\n      setPricesState(() => response.data.data!);\n    })\n    .catch((e: AxiosError) => {\n      alert(`Failed to get prices with error: ${e}`)\n    })\n  };\n\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(() => fetchData(), 300000);\n    return () => clearInterval(interval);\n  }, [setPricesState]);\n\n  return (\n    <PricesView\n      prices={pricesState}\n      pricesChangeHandler={pricesChangeHandler}\n    >{props.children}</PricesView>\n  );\n};\n\nPrices.displayName = 'Prices';\nPrices.defaultProps = {};\n\nexport default Prices;"]},"metadata":{},"sourceType":"module"}